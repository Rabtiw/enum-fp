"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.isConstructor=exports.listToObject=exports.isList=exports.matchPattern=exports.isObject=exports.isArray=void 0;function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==="function"){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable}))}ownKeys.forEach(function(key){_defineProperty(target,key,source[key])})}return target}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true})}else{obj[key]=value}return obj}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||Object.prototype.toString.call(iter)==="[object Arguments]")return Array.from(iter)}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++){arr2[i]=arr[i]}return arr2}}// isArray :: * -> Boolean
var isArray=function isArray(arr){return Object.prototype.toString.call(arr)==="[object Array]"};exports.isArray=isArray;var isObject=function isObject(obj){return obj&&obj.toString()==="[object Object]"};// matchPattern ::  (EnumTagType, Object (a -> b)) -> b
exports.isObject=isObject;var matchPattern=function matchPattern(t,pattern){var action=pattern[t.name]||pattern._;if(!action)throw new Error("Pattern passed is non exhaustive. Please pass a fallback case `_`.");return action.apply(void 0,_toConsumableArray(t.args))};// TODO: Make it not just for arrays but also other kinds of lists. Check for iteratability
exports.matchPattern=matchPattern;var isList=isArray;// listToObject :: (a -> String, a -> b, [a]) -> Object b
exports.isList=isList;var listToObject=function listToObject(toKey,toValue,list){return list.reduce(function(obj,item){return _objectSpread({},obj,_defineProperty({},toKey(item),toValue(item)))},{})};exports.listToObject=listToObject;var isConstructor=function isConstructor(constructors){return function(t){return constructors.indexOf(t)!==-1||constructors.indexOf(t.name)!==-1}};exports.isConstructor=isConstructor;