"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.normalizeSumType=exports.reduceTypeConstructors=exports.prop=void 0;var _createConstructor=_interopRequireDefault(require("./createConstructor"));var _commonUtils=require("./common-utils");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _toArray(arr){return _arrayWithHoles(arr)||_iterableToArray(arr)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||Object.prototype.toString.call(iter)==="[object Arguments]")return Array.from(iter)}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}// TODO: Sanitize name to alphanumeric value
// type ConstructorDescription = { name: String, props: [Type|String] };
// prop :: Array -> Object
var prop=function prop(_ref,defaultVal){var _ref2=_toArray(_ref),key=_ref2[0],path=_ref2.slice(1);return function(obj){return(obj||{}).hasOwnProperty(key)?path.length?prop(path,defaultVal)(obj[key]):obj[key]:defaultVal}};// reduceTypeConstructors :: (Enum, Array ConstructorDescription) -> Object EnumAction
exports.prop=prop;var reduceTypeConstructors=function reduceTypeConstructors(Type,constrDescrs){return(0,_commonUtils.listToObject)(prop(["name"]),function(constr){return(0,_createConstructor.default)(Type,constr)},constrDescrs)};// normalizeSumType :: Array String | Object [a] -> ConstructorDescription
exports.reduceTypeConstructors=reduceTypeConstructors;var normalizeSumType=function normalizeSumType(sumType){return(0,_commonUtils.isArray)(sumType)?sumType.map(function(name){return{name:name}}):Object.keys(sumType).map(function(name){return{name:name,props:sumType[name]}})};exports.normalizeSumType=normalizeSumType;